// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

// Using String for role since SQLite doesn't support enums

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String?
  lastName      String?
  role          String    @default("USER")
  isActive      Boolean   @default(true)
  isSuperuser   Boolean   @default(false)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  teams         TeamMember[]
  organizations OrganizationMember[]
  notifications Notification[]
  content       Content[]
  comments     Comment[]
  
  @@map("users")
}

model Team {
  id          String      @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  members     TeamMember[]
  
  @@map("teams")
}

model TeamMember {
  id        String   @id @default(uuid())
  userId    String
  teamId    String
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
  @@map("team_members")
}

model Organization {
  id          String      @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  members     OrganizationMember[]
  
  @@map("organizations")
}

model OrganizationMember {
  id             String   @id @default(uuid())
  userId         String
  organizationId String
  role           String   @default("member")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
  @@map("organization_members")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  isRead    Boolean  @default(false)
  type      String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model Content {
  id            String     @id @default(uuid())
  userId        String
  title         String
  slug          String     @unique
  excerpt       String?
  body          String
  status        String     @default("draft")
  type          String     @default("article")
  visibility    String     @default("public") // public, private, restricted
  metadata      String?    // Storing as JSON string
  publishedAt   DateTime?
  viewCount     Int        @default(0)
  likeCount     Int        @default(0)
  commentCount  Int        @default(0)
  featured      Boolean    @default(false)
  featuredImage String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories    ContentCategory[]
  tags          ContentTag[]
  comments      Comment[]
  versions      ContentVersion[]
  
  @@index([status])
  @@index([type])
  @@index([visibility])
  @@index([publishedAt])
  @@map("content")
}

model ContentCategory {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  contents    Content[]
  
  @@map("content_categories")
}

model ContentTag {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  createdAt   DateTime  @default(now())
  
  // Relations
  contents    Content[]
  
  @@map("content_tags")
}

model ContentVersion {
  id          String   @id @default(uuid())
  contentId   String
  version     Int
  title       String
  body        String
  excerpt     String?
  metadata    String?
  createdAt   DateTime @default(now())
  
  // Relations
  content     Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  @@unique([contentId, version])
  @@map("content_versions")
}

model Comment {
  id           String   @id @default(uuid())
  contentId    String
  userId       String
  parentId     String?
  body         String
  isApproved   Boolean  @default(true)
  isSpam       Boolean  @default(false)
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  content      Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id])
  parent       Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies      Comment[] @relation("CommentReplies")
  
  @@index([contentId])
  @@index([parentId])
  @@map("comments")
}
